{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport createSagaMiddleware from '@redux-saga/core';\nimport rootSaga from '../sagas';\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n    getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware(rootSaga);\n  return store;\n};\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","reducer","createSagaMiddleware","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","wrapper","debug"],"sources":["C:/Users/수영/Desktop/nodebird/front/store/configureStore.js"],"sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from '../reducers'\r\nimport createSagaMiddleware from '@redux-saga/core';\r\nimport rootSaga from '../sagas'\r\n\r\nconst loggerMiddleware = ({dispatch,getState})=>(next)=>(action)=>{\r\n    console.log(action);\r\n    return next(action);\r\n}\r\n\r\n\r\nconst configureStore=()=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares=[sagaMiddleware,loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV ==='production'\r\n    ?compose(applyMiddleware(...middlewares))\r\n    :composeWithDevTools(applyMiddleware(...middlewares))\r\n    const store = createStore(reducer,enhancer);\r\n    store.sagaTask = sagaMiddleware(rootSaga)\r\n    return store;\r\n};\r\n\r\nconst wrapper =createWrapper(configureStore,{ \r\n    debug:process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"],"mappings":"AAAA,SAAQA,aAAa,QAAO,oBAAoB;AAChD,SAASC,eAAe,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,oBAAoB,MAAM,kBAAkB;AACnD,OAAOC,QAAQ,MAAM,UAAU;AAE/B,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB;EAAA,IAAKC,QAAQ,QAARA,QAAQ;IAACC,QAAQ,QAARA,QAAQ;EAAA,OAAI,UAACC,IAAI;IAAA,OAAG,UAACC,MAAM,EAAG;MAC9DC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,OAAOD,IAAI,CAACC,MAAM,CAAC;IACvB,CAAC;EAAA;AAAA;AAGD,IAAMG,cAAc,GAAC,SAAfA,cAAc,GAAK;EACrB,IAAMC,cAAc,GAAGV,oBAAoB,EAAE;EAC7C,IAAMW,WAAW,GAAC,CAACD,cAAc,EAACR,gBAAgB,CAAC;EACnD,IAAMU,QAAQ,GAAG,QAChBhB,OAAO,CAACD,eAAe,eAAIgB,WAAW,CAAC,CAAC,GACxCb,mBAAmB,CAACH,eAAe,eAAIgB,WAAW,CAAC,CAAC;EACrD,IAAME,KAAK,GAAGhB,WAAW,CAACE,OAAO,EAACa,QAAQ,CAAC;EAC3CC,KAAK,CAACC,QAAQ,GAAGJ,cAAc,CAACT,QAAQ,CAAC;EACzC,OAAOY,KAAK;AAChB,CAAC;AAED,IAAME,OAAO,GAAErB,aAAa,CAACe,cAAc,EAAC;EACxCO,KAAK;AACT,CAAC,CAAC;AAEF,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}