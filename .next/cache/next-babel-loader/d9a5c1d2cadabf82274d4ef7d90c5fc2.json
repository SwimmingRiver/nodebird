{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from './../reducers/user';\nimport Signup from './../pages/signup';\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI,action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n;\nfunction signUpAPI() {\n  return axios.post('/api/singUp');\n}\nfunction* signUp() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, Signup);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","Signup","logInAPI","post","data","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/수영/Desktop/nodebird/front/sagas/user.js"],"sourcesContent":["import { all, fork,delay,put ,takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { \r\n        LOG_IN_REQUEST,LOG_IN_SUCCESS,LOG_IN_FAILURE,\r\n        LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE,\r\n        SIGN_UP_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_FAILURE , \r\n    } from './../reducers/user';\r\nimport Signup from './../pages/signup';\r\n\r\nfunction logInAPI(){\r\n    return axios.post('/api/login',data)\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        yield delay(1000);\r\n    // const result = yield call(logInAPI,action.data);\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n        data:action.data\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n        type:LOG_OUT_SUCCESS,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n};\r\n\r\nfunction signUpAPI(){\r\n    return axios.post('/api/singUp')\r\n}\r\n\r\nfunction* signUp(){\r\n    try{\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n        type:SIGN_UP_SUCCESS,\r\n        });\r\n    } catch(err){\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn)\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut)\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST,Signup)\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ])\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAACC,KAAK,EAACC,GAAG,EAAEC,UAAU,QAAO,oBAAoB;AACnE,OAAOC,KAAK,MAAM,OAAO;AACzB,SACQC,cAAc,EAACC,cAAc,EAACC,cAAc,EAC5CC,eAAe,EAACC,eAAe,EAACC,eAAe,EAC/CC,eAAe,EAACC,eAAe,EAACC,eAAe,QAC5C,oBAAoB;AAC/B,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,SAASC,QAAQ,GAAE;EACf,OAAOX,KAAK,CAACY,IAAI,CAAC,YAAY,EAACC,IAAI,CAAC;AACxC;AAEA,UAAUC,KAAK,CAACC,MAAM,EAAC;EACnB,IAAG;IACC,MAAMlB,KAAK,CAAC,IAAI,CAAC;IACrB;IACA,MAAMC,GAAG,CAAC;MACNkB,IAAI,EAACd,cAAc;MACnBW,IAAI,EAACE,MAAM,CAACF;IACZ,CAAC,CAAC;EACN,CAAC,CAAC,OAAMI,GAAG,EAAC;IACR,MAAMnB,GAAG,CAAC;MACNkB,IAAI,EAACb,cAAc;MACnBe,KAAK,EAACD,GAAG,CAACE,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASO,SAAS,GAAE;EAChB,OAAOpB,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUS,MAAM,GAAE;EACd,IAAG;IACH;IACA,MAAMxB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MACNkB,IAAI,EAACX;IACL,CAAC,CAAC;EACN,CAAC,CAAC,OAAMY,GAAG,EAAC;IACR,MAAMnB,GAAG,CAAC;MACNkB,IAAI,EAACV,eAAe;MACpBY,KAAK,EAACD,GAAG,CAACE,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAAC;AAED,SAASS,SAAS,GAAE;EAChB,OAAOtB,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUW,MAAM,GAAE;EACd,IAAG;IACH;IACA,MAAM1B,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MACNkB,IAAI,EAACR;IACL,CAAC,CAAC;EACN,CAAC,CAAC,OAAMS,GAAG,EAAC;IACR,MAAMnB,GAAG,CAAC;MACNkB,IAAI,EAACP,eAAe;MACpBS,KAAK,EAACD,GAAG,CAACE,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAGA,UAAUW,UAAU,GAAE;EAClB,MAAMzB,UAAU,CAACE,cAAc,EAACa,KAAK,CAAC;AAC1C;AACA,UAAUW,WAAW,GAAE;EACnB,MAAM1B,UAAU,CAACK,eAAe,EAACiB,MAAM,CAAC;AAC5C;AACA,UAAUK,WAAW,GAAE;EACnB,MAAM3B,UAAU,CAACQ,eAAe,EAACG,MAAM,CAAC;AAC5C;AAEA,eAAe,UAAUiB,QAAQ,GAAE;EAC/B,MAAMhC,GAAG,CAAC,CACNC,IAAI,CAAC4B,UAAU,CAAC,EAChB5B,IAAI,CAAC6B,WAAW,CAAC,EACjB7B,IAAI,CAAC8B,WAAW,CAAC,CACpB,CAAC;AACN"},"metadata":{},"sourceType":"module"}